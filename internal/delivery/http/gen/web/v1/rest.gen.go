//go:build go1.22

// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a post on behalf of an authenticated user.
	// (POST /posts/)
	PostPosts(w http.ResponseWriter, r *http.Request)
	// Delete a post by the requested ID.
	// (DELETE /posts/{id})
	DeletePostsId(w http.ResponseWriter, r *http.Request, id string)
	// Returns a variety of information about a single post specified by the requested ID.
	// (GET /posts/{id})
	GetPostsId(w http.ResponseWriter, r *http.Request, id string, params GetPostsIdParams)
	// Returns a variety of information about user specified by username.
	// (GET /users/by/username/{username})
	GetUsersByUsernameUsername(w http.ResponseWriter, r *http.Request, username string)
	// Returns information about an authorized user.
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Update information about an authorized user.
	// (PUT /users/me)
	PutUsersMe(w http.ResponseWriter, r *http.Request)
	// Returns a variety of information about a single user specified by the requested ID.
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id string)
	// Allows a user ID to follow another user.
	// (POST /users/{id}/following)
	PostUsersIdFollowing(w http.ResponseWriter, r *http.Request, id string)
	// Allows an authenticated user ID to mute the target user.
	// (POST /users/{id}/muting)
	PostUsersIdMuting(w http.ResponseWriter, r *http.Request, id string)
	// Returns posts composed by a single user, specified by the requested user ID.
	// (GET /users/{id}/posts)
	GetUsersIdPosts(w http.ResponseWriter, r *http.Request, id string, params GetUsersIdPostsParams)
	// Allows you to retrieve a collection of the most recent posts and reposts posted by you and users you follow.
	// (GET /users/{id}/timeline)
	GetUsersIdTimeline(w http.ResponseWriter, r *http.Request, id string, params GetUsersIdTimelineParams)
	// Allows a user ID to unfollow another user.
	// (DELETE /users/{sourceUserId}/following/{targetUserId})
	DeleteUsersSourceUserIdFollowingTargetUserId(w http.ResponseWriter, r *http.Request, sourceUserId string, targetUserId string)
	// Allows an authenticated user ID to unmute the target user.
	// (DELETE /users/{sourceUserId}/muting/{targetUserId})
	DeleteUsersSourceUserIdMutingTargetUserId(w http.ResponseWriter, r *http.Request, sourceUserId string, targetUserId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePostsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsIdParams

	// ------------- Optional query parameter "expansions" -------------

	err = runtime.BindQueryParameter("form", true, false, "expansions", r.URL.Query(), &params.Expansions)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expansions", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsId(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersByUsernameUsername operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByUsernameUsername(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", r.PathValue("username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersByUsernameUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutUsersMe operation middleware
func (siw *ServerInterfaceWrapper) PutUsersMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsersIdFollowing operation middleware
func (siw *ServerInterfaceWrapper) PostUsersIdFollowing(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersIdFollowing(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsersIdMuting operation middleware
func (siw *ServerInterfaceWrapper) PostUsersIdMuting(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersIdMuting(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersIdPosts operation middleware
func (siw *ServerInterfaceWrapper) GetUsersIdPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersIdPostsParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", r.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxPageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "expansions" -------------

	err = runtime.BindQueryParameter("form", true, false, "expansions", r.URL.Query(), &params.Expansions)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expansions", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersIdPosts(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersIdTimeline operation middleware
func (siw *ServerInterfaceWrapper) GetUsersIdTimeline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersIdTimelineParams

	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageToken", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageToken", Err: err})
		return
	}

	// ------------- Optional query parameter "maxPageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxPageSize", r.URL.Query(), &params.MaxPageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxPageSize", Err: err})
		return
	}

	// ------------- Optional query parameter "expansions" -------------

	err = runtime.BindQueryParameter("form", true, false, "expansions", r.URL.Query(), &params.Expansions)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expansions", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersIdTimeline(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersSourceUserIdFollowingTargetUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersSourceUserIdFollowingTargetUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sourceUserId" -------------
	var sourceUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "sourceUserId", r.PathValue("sourceUserId"), &sourceUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceUserId", Err: err})
		return
	}

	// ------------- Path parameter "targetUserId" -------------
	var targetUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "targetUserId", r.PathValue("targetUserId"), &targetUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetUserId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersSourceUserIdFollowingTargetUserId(w, r, sourceUserId, targetUserId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersSourceUserIdMutingTargetUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersSourceUserIdMutingTargetUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sourceUserId" -------------
	var sourceUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "sourceUserId", r.PathValue("sourceUserId"), &sourceUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sourceUserId", Err: err})
		return
	}

	// ------------- Path parameter "targetUserId" -------------
	var targetUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "targetUserId", r.PathValue("targetUserId"), &targetUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "targetUserId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, OAuthScopes, []string{"general"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersSourceUserIdMutingTargetUserId(w, r, sourceUserId, targetUserId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/posts/", wrapper.PostPosts)
	m.HandleFunc("DELETE "+options.BaseURL+"/posts/{id}", wrapper.DeletePostsId)
	m.HandleFunc("GET "+options.BaseURL+"/posts/{id}", wrapper.GetPostsId)
	m.HandleFunc("GET "+options.BaseURL+"/users/by/username/{username}", wrapper.GetUsersByUsernameUsername)
	m.HandleFunc("GET "+options.BaseURL+"/users/me", wrapper.GetUsersMe)
	m.HandleFunc("PUT "+options.BaseURL+"/users/me", wrapper.PutUsersMe)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	m.HandleFunc("POST "+options.BaseURL+"/users/{id}/following", wrapper.PostUsersIdFollowing)
	m.HandleFunc("POST "+options.BaseURL+"/users/{id}/muting", wrapper.PostUsersIdMuting)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}/posts", wrapper.GetUsersIdPosts)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}/timeline", wrapper.GetUsersIdTimeline)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{sourceUserId}/following/{targetUserId}", wrapper.DeleteUsersSourceUserIdFollowingTargetUserId)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{sourceUserId}/muting/{targetUserId}", wrapper.DeleteUsersSourceUserIdMutingTargetUserId)

	return m
}

type PostPostsRequestObject struct {
	Body *PostPostsJSONRequestBody
}

type PostPostsResponseObject interface {
	VisitPostPostsResponse(w http.ResponseWriter) error
}

type PostPosts201JSONResponse PostIdResponse

func (response PostPosts201JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostPostsdefaultJSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePostsIdRequestObject struct {
	Id string `json:"id"`
}

type DeletePostsIdResponseObject interface {
	VisitDeletePostsIdResponse(w http.ResponseWriter) error
}

type DeletePostsId200Response struct {
}

func (response DeletePostsId200Response) VisitDeletePostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePostsIddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeletePostsIddefaultJSONResponse) VisitDeletePostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostsIdRequestObject struct {
	Id     string `json:"id"`
	Params GetPostsIdParams
}

type GetPostsIdResponseObject interface {
	VisitGetPostsIdResponse(w http.ResponseWriter) error
}

type GetPostsId200JSONResponse PostResponse

func (response GetPostsId200JSONResponse) VisitGetPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostsIddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetPostsIddefaultJSONResponse) VisitGetPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersByUsernameUsernameRequestObject struct {
	Username string `json:"username"`
}

type GetUsersByUsernameUsernameResponseObject interface {
	VisitGetUsersByUsernameUsernameResponse(w http.ResponseWriter) error
}

type GetUsersByUsernameUsername200JSONResponse UserShortProjection

func (response GetUsersByUsernameUsername200JSONResponse) VisitGetUsersByUsernameUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByUsernameUsernamedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUsersByUsernameUsernamedefaultJSONResponse) VisitGetUsersByUsernameUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse User

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUsersMedefaultJSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutUsersMeRequestObject struct {
	Body *PutUsersMeJSONRequestBody
}

type PutUsersMeResponseObject interface {
	VisitPutUsersMeResponse(w http.ResponseWriter) error
}

type PutUsersMe200Response struct {
}

func (response PutUsersMe200Response) VisitPutUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutUsersMedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PutUsersMedefaultJSONResponse) VisitPutUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersIdRequestObject struct {
	Id string `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse UserShortProjection

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUsersIddefaultJSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUsersIdFollowingRequestObject struct {
	Id   string `json:"id"`
	Body *PostUsersIdFollowingJSONRequestBody
}

type PostUsersIdFollowingResponseObject interface {
	VisitPostUsersIdFollowingResponse(w http.ResponseWriter) error
}

type PostUsersIdFollowing201Response struct {
}

func (response PostUsersIdFollowing201Response) VisitPostUsersIdFollowingResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersIdFollowingdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUsersIdFollowingdefaultJSONResponse) VisitPostUsersIdFollowingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUsersIdMutingRequestObject struct {
	Id   string `json:"id"`
	Body *PostUsersIdMutingJSONRequestBody
}

type PostUsersIdMutingResponseObject interface {
	VisitPostUsersIdMutingResponse(w http.ResponseWriter) error
}

type PostUsersIdMuting201Response struct {
}

func (response PostUsersIdMuting201Response) VisitPostUsersIdMutingResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostUsersIdMutingdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response PostUsersIdMutingdefaultJSONResponse) VisitPostUsersIdMutingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersIdPostsRequestObject struct {
	Id     string `json:"id"`
	Params GetUsersIdPostsParams
}

type GetUsersIdPostsResponseObject interface {
	VisitGetUsersIdPostsResponse(w http.ResponseWriter) error
}

type GetUsersIdPosts200JSONResponse ListPostResponse

func (response GetUsersIdPosts200JSONResponse) VisitGetUsersIdPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdPostsdefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUsersIdPostsdefaultJSONResponse) VisitGetUsersIdPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUsersIdTimelineRequestObject struct {
	Id     string `json:"id"`
	Params GetUsersIdTimelineParams
}

type GetUsersIdTimelineResponseObject interface {
	VisitGetUsersIdTimelineResponse(w http.ResponseWriter) error
}

type GetUsersIdTimeline200JSONResponse ListPostResponse

func (response GetUsersIdTimeline200JSONResponse) VisitGetUsersIdTimelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdTimelinedefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response GetUsersIdTimelinedefaultJSONResponse) VisitGetUsersIdTimelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUsersSourceUserIdFollowingTargetUserIdRequestObject struct {
	SourceUserId string `json:"sourceUserId"`
	TargetUserId string `json:"targetUserId"`
}

type DeleteUsersSourceUserIdFollowingTargetUserIdResponseObject interface {
	VisitDeleteUsersSourceUserIdFollowingTargetUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersSourceUserIdFollowingTargetUserId200Response struct {
}

func (response DeleteUsersSourceUserIdFollowingTargetUserId200Response) VisitDeleteUsersSourceUserIdFollowingTargetUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUsersSourceUserIdFollowingTargetUserIddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeleteUsersSourceUserIdFollowingTargetUserIddefaultJSONResponse) VisitDeleteUsersSourceUserIdFollowingTargetUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteUsersSourceUserIdMutingTargetUserIdRequestObject struct {
	SourceUserId string `json:"sourceUserId"`
	TargetUserId string `json:"targetUserId"`
}

type DeleteUsersSourceUserIdMutingTargetUserIdResponseObject interface {
	VisitDeleteUsersSourceUserIdMutingTargetUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersSourceUserIdMutingTargetUserId200Response struct {
}

func (response DeleteUsersSourceUserIdMutingTargetUserId200Response) VisitDeleteUsersSourceUserIdMutingTargetUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUsersSourceUserIdMutingTargetUserIddefaultJSONResponse struct {
	Body       ErrorResponse
	StatusCode int
}

func (response DeleteUsersSourceUserIdMutingTargetUserIddefaultJSONResponse) VisitDeleteUsersSourceUserIdMutingTargetUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Creates a post on behalf of an authenticated user.
	// (POST /posts/)
	PostPosts(ctx context.Context, request PostPostsRequestObject) (PostPostsResponseObject, error)
	// Delete a post by the requested ID.
	// (DELETE /posts/{id})
	DeletePostsId(ctx context.Context, request DeletePostsIdRequestObject) (DeletePostsIdResponseObject, error)
	// Returns a variety of information about a single post specified by the requested ID.
	// (GET /posts/{id})
	GetPostsId(ctx context.Context, request GetPostsIdRequestObject) (GetPostsIdResponseObject, error)
	// Returns a variety of information about user specified by username.
	// (GET /users/by/username/{username})
	GetUsersByUsernameUsername(ctx context.Context, request GetUsersByUsernameUsernameRequestObject) (GetUsersByUsernameUsernameResponseObject, error)
	// Returns information about an authorized user.
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
	// Update information about an authorized user.
	// (PUT /users/me)
	PutUsersMe(ctx context.Context, request PutUsersMeRequestObject) (PutUsersMeResponseObject, error)
	// Returns a variety of information about a single user specified by the requested ID.
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Allows a user ID to follow another user.
	// (POST /users/{id}/following)
	PostUsersIdFollowing(ctx context.Context, request PostUsersIdFollowingRequestObject) (PostUsersIdFollowingResponseObject, error)
	// Allows an authenticated user ID to mute the target user.
	// (POST /users/{id}/muting)
	PostUsersIdMuting(ctx context.Context, request PostUsersIdMutingRequestObject) (PostUsersIdMutingResponseObject, error)
	// Returns posts composed by a single user, specified by the requested user ID.
	// (GET /users/{id}/posts)
	GetUsersIdPosts(ctx context.Context, request GetUsersIdPostsRequestObject) (GetUsersIdPostsResponseObject, error)
	// Allows you to retrieve a collection of the most recent posts and reposts posted by you and users you follow.
	// (GET /users/{id}/timeline)
	GetUsersIdTimeline(ctx context.Context, request GetUsersIdTimelineRequestObject) (GetUsersIdTimelineResponseObject, error)
	// Allows a user ID to unfollow another user.
	// (DELETE /users/{sourceUserId}/following/{targetUserId})
	DeleteUsersSourceUserIdFollowingTargetUserId(ctx context.Context, request DeleteUsersSourceUserIdFollowingTargetUserIdRequestObject) (DeleteUsersSourceUserIdFollowingTargetUserIdResponseObject, error)
	// Allows an authenticated user ID to unmute the target user.
	// (DELETE /users/{sourceUserId}/muting/{targetUserId})
	DeleteUsersSourceUserIdMutingTargetUserId(ctx context.Context, request DeleteUsersSourceUserIdMutingTargetUserIdRequestObject) (DeleteUsersSourceUserIdMutingTargetUserIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostPosts operation middleware
func (sh *strictHandler) PostPosts(w http.ResponseWriter, r *http.Request) {
	var request PostPostsRequestObject

	var body PostPostsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosts(ctx, request.(PostPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPostsResponseObject); ok {
		if err := validResponse.VisitPostPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePostsId operation middleware
func (sh *strictHandler) DeletePostsId(w http.ResponseWriter, r *http.Request, id string) {
	var request DeletePostsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsId(ctx, request.(DeletePostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePostsIdResponseObject); ok {
		if err := validResponse.VisitDeletePostsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostsId operation middleware
func (sh *strictHandler) GetPostsId(w http.ResponseWriter, r *http.Request, id string, params GetPostsIdParams) {
	var request GetPostsIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsId(ctx, request.(GetPostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostsIdResponseObject); ok {
		if err := validResponse.VisitGetPostsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersByUsernameUsername operation middleware
func (sh *strictHandler) GetUsersByUsernameUsername(w http.ResponseWriter, r *http.Request, username string) {
	var request GetUsersByUsernameUsernameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByUsernameUsername(ctx, request.(GetUsersByUsernameUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByUsernameUsername")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersByUsernameUsernameResponseObject); ok {
		if err := validResponse.VisitGetUsersByUsernameUsernameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	var request GetUsersMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx, request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		if err := validResponse.VisitGetUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutUsersMe operation middleware
func (sh *strictHandler) PutUsersMe(w http.ResponseWriter, r *http.Request) {
	var request PutUsersMeRequestObject

	var body PutUsersMeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersMe(ctx, request.(PutUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutUsersMeResponseObject); ok {
		if err := validResponse.VisitPutUsersMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersIdFollowing operation middleware
func (sh *strictHandler) PostUsersIdFollowing(w http.ResponseWriter, r *http.Request, id string) {
	var request PostUsersIdFollowingRequestObject

	request.Id = id

	var body PostUsersIdFollowingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersIdFollowing(ctx, request.(PostUsersIdFollowingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersIdFollowing")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersIdFollowingResponseObject); ok {
		if err := validResponse.VisitPostUsersIdFollowingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsersIdMuting operation middleware
func (sh *strictHandler) PostUsersIdMuting(w http.ResponseWriter, r *http.Request, id string) {
	var request PostUsersIdMutingRequestObject

	request.Id = id

	var body PostUsersIdMutingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersIdMuting(ctx, request.(PostUsersIdMutingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersIdMuting")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersIdMutingResponseObject); ok {
		if err := validResponse.VisitPostUsersIdMutingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersIdPosts operation middleware
func (sh *strictHandler) GetUsersIdPosts(w http.ResponseWriter, r *http.Request, id string, params GetUsersIdPostsParams) {
	var request GetUsersIdPostsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdPosts(ctx, request.(GetUsersIdPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdPosts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdPostsResponseObject); ok {
		if err := validResponse.VisitGetUsersIdPostsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersIdTimeline operation middleware
func (sh *strictHandler) GetUsersIdTimeline(w http.ResponseWriter, r *http.Request, id string, params GetUsersIdTimelineParams) {
	var request GetUsersIdTimelineRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdTimeline(ctx, request.(GetUsersIdTimelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdTimeline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersIdTimelineResponseObject); ok {
		if err := validResponse.VisitGetUsersIdTimelineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsersSourceUserIdFollowingTargetUserId operation middleware
func (sh *strictHandler) DeleteUsersSourceUserIdFollowingTargetUserId(w http.ResponseWriter, r *http.Request, sourceUserId string, targetUserId string) {
	var request DeleteUsersSourceUserIdFollowingTargetUserIdRequestObject

	request.SourceUserId = sourceUserId
	request.TargetUserId = targetUserId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersSourceUserIdFollowingTargetUserId(ctx, request.(DeleteUsersSourceUserIdFollowingTargetUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersSourceUserIdFollowingTargetUserId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUsersSourceUserIdFollowingTargetUserIdResponseObject); ok {
		if err := validResponse.VisitDeleteUsersSourceUserIdFollowingTargetUserIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsersSourceUserIdMutingTargetUserId operation middleware
func (sh *strictHandler) DeleteUsersSourceUserIdMutingTargetUserId(w http.ResponseWriter, r *http.Request, sourceUserId string, targetUserId string) {
	var request DeleteUsersSourceUserIdMutingTargetUserIdRequestObject

	request.SourceUserId = sourceUserId
	request.TargetUserId = targetUserId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersSourceUserIdMutingTargetUserId(ctx, request.(DeleteUsersSourceUserIdMutingTargetUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersSourceUserIdMutingTargetUserId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUsersSourceUserIdMutingTargetUserIdResponseObject); ok {
		if err := validResponse.VisitDeleteUsersSourceUserIdMutingTargetUserIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
